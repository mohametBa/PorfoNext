import React, { Fragment, useContext } from "react";
import Head from "next/head";
import SyntaxHighlighter from "react-syntax-highlighter";
import { github, dark } from "react-syntax-highlighter/dist/cjs/styles/hljs";

import BackTo from "@/components/buttons/BackTo";
import Theme from "@/utils/Theme";
import { ThemeContext } from "@/context/themeContext";

const UseState = () => {
  const { theme } = useContext(ThemeContext);

  return (
    <Fragment>
      <Head>
        <title>useState in React</title>
      </Head>

      <Theme>
        <BackTo backTo={"blogs"} />

        <div className="layoutContainer">
          <div className="layoutBox1">
            <h1 className="blog-heading">useState in React</h1>

            <div>
              <p className="text-lg font-medium mt-4">Introduction :-</p>
              <p className="my--2">
                React est une biblioth√®que JavaScript populaire pour la cr√©ation
                d&apos;interfaces utilisateur, et son introduction aux hooks
                dans la version 16.8 a apport√© des am√©liorations significatives
                aux composants fonctionnels. Un des hooks les plus utilis√©s est
                useState, qui permet aux d√©veloppeurs d&apos;ajouter des
                fonctionnalit√©s de gestion d&apos;√©tat √† leurs composants
                fonctionnels. Dans cet article de blog, nous explorerons le hook
                useState, comprendrons son utilisation et apprendrons comment il
                simplifie la gestion d&apos;√©tat dans les applications React.
              </p>

              <p className="text-lg font-medium mt-4">Why useState? :-</p>
              <p className="my-2">
                Avant l&apos;introduction des hooks, la gestion de l&apos;√©tat
                dans React √©tait principalement effectu√©e √† l&apos;aide de
                composants de classe. Bien que les composants de classe
                remplissaient leur r√¥le, ils n√©cessitaient souvent du code
                standard et une syntaxe complexe. Les composants fonctionnels,
                en revanche, √©taient plus simples et l√©gers, mais manquaient de
                capacit√©s de gestion d&apos;√©tat int√©gr√©es. Le hook useState
                comble cet √©cart en permettant aux composants fonctionnels de
                g√©rer l&apos;√©tat, les rendant ainsi plus puissants et plus
                faciles √† utiliser.
              </p>

              <Syntax myDark={theme === "dark"} />

              <p className="text-center my-3">
                üôè Je sais y a encore du boulot
              </p>
            </div>
          </div>

          <div className="layoutBox2">Salut</div>
        </div>
      </Theme>
    </Fragment>
  );
};

export default UseState;

const Syntax = ({ myDark }) => {
  const codeString = "const [state, setState] = useState(initialState);";

  return (
    <>
      <p className="mt-5">
        Le hook useState est une fonction qui prend une valeur d&apos;√©tat
        initiale comme argument et renvoie un tableau avec deux √©l√©ments : la
        valeur d&apos;√©tat actuelle et une fonction pour mettre √† jour cette
        valeur d&apos;√©tat.
      </p>

      <div className="my-3">
        <SyntaxHighlighter
          language="javascript"
          showLineNumbers={true}
          style={myDark ? dark : github}
        >
          {codeString}
        </SyntaxHighlighter>
      </div>

      <div>
        <p className="my-4">Voici une explication de la syntaxe :</p>

        <p className="mt-2">
          <strong>state</strong> = Repr√©sente la valeur actuelle de la variable
          d&apos;√©tat. Elle peut √™tre de n&apos;importe quel type de donn√©es,
          par exemple : Boolean, String, Object, ou Array.
        </p>

        <p className="mt-2">
          <strong>setState</strong> = La fonction retourn√©e par useState qui
          vous permet de mettre √† jour la valeur de l&apos;√©tat.
          Lorsqu&apos;elle est appel√©e avec une nouvelle valeur, elle d√©clenche
          un nouveau rendu du composant, mettant √† jour l&apos;√©tat et tous les
          √©l√©ments du composant qui en d√©pendent.
        </p>

        <p className="mt-2">
          <strong>useState(initialState)</strong> = La fonction useState prend
          la valeur initiale de l&apos;√©tat comme argument. Cette valeur
          initiale est uniquement utilis√©e lors du premier rendu du composant.
          Ensuite, la variable d&apos;√©tat sera mise √† jour avec de nouvelles
          valeurs.
        </p>
      </div>
    </>
  );
};
